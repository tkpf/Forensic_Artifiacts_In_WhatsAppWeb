'''
This script was generated by ChatGPT
'''

import argparse
import pandas as pd
import matplotlib.pyplot as plt

def count_country_occurrences(input_file, output_file):
    # Read the input CSV file
    df = pd.read_csv(input_file)

    # Count the occurrences of each country code
    occurrences = df['country_code'].value_counts().reset_index()

    # Rename the columns
    occurrences.columns = ['country_code', 'occurrences']

    # Save the results to the output CSV file
    occurrences.to_csv(output_file, index=False)


def visualized_country_code_occurences(input_file, instances_to_visualize = None,  figsize = (10,6)):
    # Read the CSV file
    data = pd.read_csv(input_file)

    if instances_to_visualize:
        data = data.head(instances_to_visualize)

    # Extract the required columns
    country_codes = data['country_code']
    occurrences = data['occurrences']

    # Create the bar plot
    plt.figure(figsize=figsize)  # Adjust the figure size if needed
    plt.bar(country_codes, occurrences)

    # Set the labels and title
    plt.xlabel('Country Code')
    plt.ylabel('Occurrences')
    plt.title('Number Occurrences by Country')

    # Rotate the x-axis labels if needed
    plt.xticks(rotation=90)

    # Set the y-axis scale to logarithmic
    plt.yscale('log')

    # Show the plot
    plt.show()


def visualized_number_occurences(input_file, instances_to_visualize = 20, figsize = (10,6), fixed_scale = None):
    '''
    This function was generated by ChatGPT
    '''
    # Read the CSV file
    data = pd.read_csv(input_file)

    # Extract the required columns for the first 20 entries
    data_subset = data.head(instances_to_visualize)
    numbers = data_subset['number']
    names = data_subset['name']
    contacts = data_subset['in_contacts']
    country_codes = data_subset['country_code']
    occurrences = data_subset['occ']

    # Assign colors based on country_code
    colors = {'GER': 'blue', 'FRA': 'green', 'SWE': 'red', 'HKG': 'orange', 'DEN': 'purple', 'GRE': 'pink', 'ITA': 'cyan', 'USA': 'magenta', 'IND': 'yellow', 'RUS': 'lightgreen', 'COL': 'gold', 'CCK': 'lime', 'MAS': 'teal', 'ESP': 'salmon', 'VIE': 'lavender'}

    # Create the bar plot with colored bars
    plt.figure(figsize=figsize)  # Adjust the figure size if needed

    # Iterate over the data and plot the bars
    for i in range(len(numbers)):
        plt.bar(i, occurrences[i], color=colors.get(country_codes[i], 'gray'))

    # Set the x-axis tick labels
    plt.xticks(range(len(numbers)), range(1,len(numbers)+1))
    plt.xlabel('Number')
    plt.ylabel('Occurrences')

    # Set the y-axis scale to logarithmic
    plt.yscale('log')
    # Set the y-axis limits
    if fixed_scale:
        plt.ylim(fixed_scale)

    # Create a legend for the colors
    # Create a legend for the colors
    legend_labels = [plt.Rectangle((0, 0), 1, 1, color=colors.get(country, 'gray')) for country in set(country_codes)]
    plt.legend(legend_labels, set(country_codes), title='Country Code')


    plt.title('Number Occurrences')

    # Show the plot
    plt.show()



def main():
    # Create the argument parser
    parser = argparse.ArgumentParser(description='Count Country Occurrences')

    # Add the command-line arguments
    parser.add_argument('-f', dest='input_file', help='input CSV file')

    # Parse the command-line arguments
    args = parser.parse_args()

    # Get the input file name
    input_file = args.input_file

    # Set the output file name
    output_file = input_file.rsplit('.', 1)[0] + '_country_occ.csv'

    # Count country occurrences and save to the output file
    count_country_occurrences(input_file, output_file)
    print(f"Country occurrences saved to {output_file}")




NUMBERS_ENCLOSED_OCC_FILE = 'output/number_and_contacts_with_country_code_and_occurences_sorted_by_occ.csv'
NUMBERS_NAIVE_OCC_FILE = 'output/number_simple_with_country_code_and_occurences_sorted_by_occ.csv'

COUNTRY_CODE_NAIVE_OCC_FILE = 'output/number_simple_with_country_code_and_occurences_sorted_by_occ_country_occ.csv'
COUNTRY_CODE_ENCLOSED_OCC_FILE = 'output/number_and_contacts_with_country_code_and_occurences_sorted_by_occ_country_occ.csv'


if __name__ == '__main__':
    # main()



    #visualized_number_occurences(NUMBERS_NAIVE_OCC_FILE, instances_to_visualize=30, figsize=(10, 6))
    #visualized_number_occurences(NUMBERS_ENCLOSED_OCC_FILE, instances_to_visualize=30)

    visualized_country_code_occurences(COUNTRY_CODE_NAIVE_OCC_FILE, instances_to_visualize = 10, figsize=(6,6))
    visualized_country_code_occurences(COUNTRY_CODE_ENCLOSED_OCC_FILE, instances_to_visualize= 10, figsize=(6,6))

